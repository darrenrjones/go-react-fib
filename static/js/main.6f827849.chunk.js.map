{"version":3,"sources":["actions/main.js","components/ValidForm.js","components/Form.js","components/NumbersDisplay.js","App.js","reducers/reducer.js","store.js","serviceWorker.js","index.js"],"names":["getFib","num","type","ValidForm","props","formErrors","react_default","a","createElement","className","Form","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","userInput","target","value","handleSubmit","preventDefault","console","log","state","formValid","dispatch","inherits","createClass","key","onSubmit","components_ValidForm","onChange","React","Component","connect","NumbersDisplay","numbers","map","i","App","components_Form","components_NumbersDisplay","mainReducer","fibSequence","initialState","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","arguments","length","undefined","action","objectSpread","x","fibArray","j","k","push","fib","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f827849.chunk.js","sourcesContent":["// import axios from \"axios\";\n\nexport const GET_FIB = 'GET_FIB';\nexport const getFib = (num) => ({\n  type: GET_FIB,\n  num\n});","import React from 'react';\n\nexport const ValidForm = props => {\n\n  if (!props.formErrors) {\n    return <div className='form-error'><p>INVALID INPUT</p><p>Please try a number between 0 and 1,477</p></div>\n  } else {\n    return ''\n  }\n}\n\nexport default ValidForm;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getFib } from '../actions/main';\nimport ValidForm from './ValidForm';\n\n// import { addContact, setContacts, getContacts } from '../actions/mainActions';\n\nexport class Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      formValid: true,\n    }\n  }\n\n  handleChange = event => {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(this.state.userInput);\n    if (this.state.userInput >= 0) {\n      this.setState({formValid: true})\n      this.props.dispatch(getFib(this.state.userInput))\n    } else {\n      this.setState({formValid: false});\n    }\n\n    this.setState({ userInput: '' });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} >\n        <label>\n          How many numbers in the Fibonacci sequence would you like to see? <br></br>\n          <ValidForm formErrors={this.state.formValid} />\n          <input\n            type=\"number\"\n            value={this.state.userInput}\n            onChange={this.handleChange}\n          />\n        </label>\n        <br></br>\n        <button type=\"submit\">\n          generate sequence\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default connect()(Form);","import React from 'react';\n\nexport const NumbersDisplay = props => {\n  return (\n    <div className='numbers-display-container'>\n      {props.numbers.map((num, i) => {\n        return <p className='indNum' key={i}>{num}</p>\n      })}\n    </div>\n  )\n}\n\nexport default NumbersDisplay;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './styles/App.css';\nimport 'normalize.css';\n\nimport Form from './components/Form';\nimport NumbersDisplay from './components/NumbersDisplay';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n          <h1>Fibonacci Sequence using Golang!</h1>\n        </header>\n\n          <Form />\n\n          <div>\n            <NumbersDisplay\n              numbers={this.props.num}\n            />\n          </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  num: state.mainReducer.fibSequence\n});\n\nexport default connect(mapStateToProps)(App);\n","import { GET_FIB } from \"../actions/main\";\n\nconst initialState = {\n  fibSequence: []\n}\n\nconst fib = num => {\n  for(var fibArray = [0,1], i=0,j=1,k=0,x; k<num-2;i=j,j=x,k++ ){\n      // if(isFinite(x)){\n      //   return fibArray;\n      // }\n      x=i+j;\n      fibArray.push(x);\n      console.log(x);\n      \n  }\n  return fibArray;\n}\n\nexport default (state = initialState, action) => {\n\n  if (action.type === GET_FIB) {\n    return {\n      ...state,\n      fibSequence: fib(action.num)\n    }\n  }\n\n  return state;\n}\n\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport mainReducer from './reducers/reducer';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combineReducers({\n    mainReducer,\n  }),\n  composeEnhancer(applyMiddleware(thunk))\n);\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}